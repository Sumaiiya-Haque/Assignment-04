1. totalFine(fare)
function totalFine(fare){
    if(typeof fare !== 'number' || fare <= 0){
        return 'Invalid';
    }
    const fine = fare + fare * (20 / 100) + 30;
    return fine;
}


тЬЕ ржХрж╛ржЬ:

fare ржпржжрж┐ рж╕ржВржЦрзНржпрж╛ ржирж╛ рж╣ржпрж╝ ржмрж╛ рж╢рзВржирзНржп/ржирзЗржЧрзЗржЯрж┐ржн рж╣ржпрж╝, "Invalid" рж░рж┐ржЯрж╛рж░рзНржи ржХрж░ржмрзЗред

ржЕржирзНржпржерж╛ржпрж╝ ржорзЛржЯ ржЬрж░рж┐ржорж╛ржирж╛ = ржорзВрж▓ ржнрж╛ржбрж╝рж╛ + рзирзж% ржнрж╛ржбрж╝рж╛ + рзйрзж ржпрзЛржЧ ржХрж░ржмрзЗред

ЁЯТб ржкрж░рж╛ржорж░рзНрж╢: 20 / 100 ржПрж░ ржмржжрж▓рзЗ 0.2 ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж▓рзЗ ржкржбрж╝рждрзЗ рж╕рж╣ржЬ рж╣ржмрзЗред

2. onlyCharacter(str)
function onlyCharacter(str) {
    if(typeof str !== 'string'){
        return 'Invalid';
    }
    let newStr = "";
    for(let i = 0; i < str.length; i++){
        if(str[i] !== " "){
            newStr = newStr + str[i];
        }
    }
    return newStr.toUpperCase();
}


тЬЕ ржХрж╛ржЬ:

ржЗржиржкрзБржЯ рж╕рзНржЯрзНрж░рж┐ржВ ржирж╛ рж╣рж▓рзЗ "Invalid"

рж╕ржм рж╕рзНржкрзЗрж╕ ржмрж╛ржж ржжрзЗржпрж╝

ржмрж╛ржХрж┐ ржХрзНржпрж╛рж░рзЗржХрзНржЯрж╛рж░ржЧрзБрж▓рзЛ ржмржбрж╝ рж╣рж╛рждрзЗрж░ ржХрж░рзЗ ржжрзЗржпрж╝

ЁЯТб ржкрж░рж╛ржорж░рзНрж╢: рж▓рзБржкрзЗрж░ ржмржжрж▓рзЗ .split(" ").join("").toUpperCase() ржХрж░рж▓рзЗ ржХрзЛржб ржЖрж░ржУ ржЫрзЛржЯ рж╣ржмрзЗред

3. bestTeam(player1, player2)
function bestTeam(player1, player2) {
    if(typeof player1 !== 'object' || typeof player2 !== 'object' || Array.isArray(player1) || Array.isArray(player2)){
        return 'Invalid';
    }
    const sum1 = player1.foul + player1.cardY + player1.cardR;
    const sum2 = player2.foul + player2.cardY + player2.cardR;
    if(sum1 < sum2){
        return player1.name;
    }
    else if(sum1 === sum2){
        return "Tie";
    }
    else{
        return player2.name;
    }
}


тЬЕ ржХрж╛ржЬ:

ржжрзБржЗржЬржи ржкрзНрж▓рзЗржпрж╝рж╛рж░рзЗрж░ foul + cardY + cardR ржпрзЛржЧржлрж▓ рждрзБрж▓ржирж╛ ржХрж░рзЗ ржХржо ржпрж╛ржБрж░, рж╕рзЗ ржмрж┐ржЬржпрж╝рзАред

рж╕ржорж╛ржи рж╣рж▓рзЗ "Tie"ред

ЁЯТб ржкрж░рж╛ржорж░рзНрж╢: ржПржЦрж╛ржирзЗ player1, player2-ржПрж░ рж╕ржм ржкрзНрж░ржкрж╛рж░рзНржЯрж┐ ржЖржЫрзЗ ржХрж┐ржирж╛ рждрж╛ ржЖржЧрзЗ ржЪрзЗржХ ржХрж░рж╛ ржнрж╛рж▓рзЛред

4. isSame(arr1, arr2)
function isSame(arr1, arr2) {
    if(!Array.isArray(arr1) || !Array.isArray(arr2)){
        return "Invalid"
    }
    if(arr1.length !== arr2.length) return false;
    for(let i = 0; i < arr1.length; i++){
        if(arr1[i] !== arr2[i]) return false;
    }
    return true;
}


тЬЕ ржХрж╛ржЬ:

ржжрзБржЗ ржЕрзНржпрж╛рж░рзЗ ржПржХржЗ ржХрж┐ржирж╛ ржЪрзЗржХ ржХрж░рзЗред

strict equality (===) ржирж╛ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ loose comparison (!=) ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж▓рзЗ "4" ржЖрж░ 4-ржХрзЗ рж╕ржорж╛ржи ржзрж░рж╛ ржпрзЗрждред

5. resultReport(marks)
function resultReport(marks) {
    if(!Array.isArray(marks)){
        return "Invalid"
    }
    if(marks.length === 0){
        return {
            'finalScore':0,
            'pass':0,
            'fail':0
        }
    }
    let pass = [];
    let fail = [];
    for(let mark of marks){
        if(mark < 40){
            fail.push(mark)
        }
        if(mark >= 40){
            pass.push(mark)
        }
    }
    let finalScore = 0;
    if(marks.length){
        for(let mark of marks){
            finalScore = finalScore + mark;
        }
    }
    let finalAvg = finalScore / (marks.length)
    return {
        'finalScore':Math.floor(finalAvg),
        'pass':pass.length,
        'fail':fail.length
    }
}


тЬЕ ржХрж╛ржЬ:

ржорж╛рж░рзНржХрж╕ ржЕрзНржпрж╛рж░рзЗ ржирж╛ рж╣рж▓рзЗ "Invalid"

ржЦрж╛рж▓рж┐ рж╣рж▓рзЗ рж╢рзВржирзНржп ржлрж▓рж╛ржлрж▓

40 ржмрж╛ рждрж╛рж░ ржмрзЗрж╢рж┐ рж╣рж▓рзЗ ржкрж╛рж╕ ржХрж╛ржЙржирзНржЯ, ржХржо рж╣рж▓рзЗ ржлрзЗрж▓ ржХрж╛ржЙржирзНржЯ

ржЧржбрж╝ ржиржорзНржмрж░ floor ржХрж░рзЗ finalScore

ЁЯТб ржкрж░рж╛ржорж░рзНрж╢: pass ржПржмржВ fail ржЕрзНржпрж╛рж░рзЗ ржЖрж▓рж╛ржжрж╛ рж░рж╛ржЦрж╛рж░ ржжрж░ржХрж╛рж░ ржирзЗржЗ, рж╢рзБржзрзБ ржХрж╛ржЙржирзНржЯ рж░рж╛ржЦрж▓рзЗржЗ рж╣ржмрзЗред


